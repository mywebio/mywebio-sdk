#* @vtlvariable name="i" type="io.myweb.processor.model.ParsedMethod" *#
/*
 * GENERATED FILE
 */
package io.myweb;

import android.content.Context;
import android.util.Log;
import android.net.LocalSocket;

import java.io.*;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import io.myweb.Endpoint;

## to z zewnÄ…trz
###set( $params = new Param("java.lang.String", "cos"))

## comment one-line
#*
  comment multi-line
 *#
public class $i.generatedClassName extends Endpoint {

    private Context context;

    public ${i.generatedClassName}(Context context) {
        this.context = context;
    }

    @Override
    public String httpMethod() {
        return "$i.httpMethod";
    }

    @Override
    public String originalPath() {
        return "$i.httpUri";
    }

    private String patternStr = "$i.patternStr";

    @Override
    public Pattern matcher() {
        return Pattern.compile(patternStr);
    }

    @Override
    public boolean match(String method, String uri) {
        Matcher m = matcher().matcher(uri);
        boolean matched = httpMethod().equals(method) && m.matches();
        if (matched) {
            Log.d("Endpoint", "matched path " + httpMethod() + " " + originalPath() + " (pattern: " + patternStr + ") request: " + method + " " + uri);
        } else {
            Log.d("Endpoint", "not matched path " + httpMethod() + " " + originalPath() + " (pattern: " + patternStr + ") request: " + method + " " + uri);
        }
        return matched;
    }

    ## formal parameters of method $delegateeClass().$delegateeMethod
    @Override
	public FormalParam[] formalParams() {
		return new FormalParam[] {
			new FormalParam() {
				@Override
				public int id() {
					return 0;
				}

				@Override
				public String type() {
					return null;
				}

				@Override
				public String name() {
					return null;
				}
			},
			new FormalParam() {
				@Override
				public int id() {
					return 1;
				}

				@Override
				public String type() {
					return null;
				}

				@Override
				public String name() {
					return null;
				}
			}
		};
	}

    @Override
    public ActualParam[] actualParams(String uri, String request) {
		Matcher m = matcher().matcher(uri);
		final String[] matchedGroups;
		int groupCount;
		if (m.matches()) {
			groupCount = m.groupCount();
			matchedGroups = new String[groupCount];
			if (groupCount > 0) {
				// TODO support more groups
				matchedGroups[0] = m.group(1);
			}
		} else {
			throw new RuntimeException("Shouldn't happen");
		}
        return buildActualParams(matchedGroups);
    }

    private ActualParam[] buildActualParams(final String[] matchedGroups) {
		ActualParam[] ap = new ActualParam[matchedGroups.length];
		for (int i = 0; i < matchedGroups.length; i++) {
			final int cur = i;
			ap[i] = new ActualParam() {
				@Override
				public Object val() {
					return matchedGroups[cur];
				}
			};
		}
		return ap;
	}

    @Override
	public void invoke(String uri, String request, LocalSocket localSocket, String reqId) {
		try {
			ActualParam[] ap = actualParams(uri, request);
            OutputStream os = new BufferedOutputStream(localSocket.getOutputStream(), 32 * 1024);
            writeResponseHeaders(os, reqId);
            final ${i.destMethodRetType} resp = new ${i.destClass}().${i.destMethod}($i.paramsJavaSrc);
            String mime;
            long length;
#if($i.destMethodRetType == "java.lang.String")
            length = resp.length();
            InputStream is = new ByteArrayInputStream(resp.getBytes());
            mime = "$i.produces";
#elseif($i.destMethodRetType == "java.io.InputStream")
            length = 0;
            InputStream is = resp;
            mime = "$i.produces";
#elseif($i.destMethodRetType == "io.myweb.api.HttpResponse")
            length = resp.getContentLength();
            InputStream is = resp.getInputStream();
            if (resp.getMimeType() == null) {
                mime = "$i.produces";
            } else {
                mime = resp.getMimeType();
            }
#end
            if (length > 0) {
                os.write(("Content-Length: " + length + "\r\n").getBytes());
            }
            os.write(("Content-Type: " + mime + "\r\n").getBytes());
            os.write("\r\n".getBytes());
            os.flush();
            copy(is, os);
            os.close();
        } catch (Exception e) {
            Log.d("Endpoint", "error during invoke", e);
        }
    }
}
