#* @vtlvariable name="importPrefix" type="java.lang.String" *#
#* @vtlvariable name="endpoints" type="java.util.List<java.lang.String>" *#
package io.myweb;

import ${importPrefix}android.content.Intent;
import ${importPrefix}android.net.LocalSocket;
import ${importPrefix}android.net.LocalSocketAddress;
import ${importPrefix}android.os.IBinder;

import io.myweb.gen.Endpoint;

import java.io.IOException;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.FileDescriptor;
import java.io.OutputStream;
import java.io.PrintStream;
import java.util.concurrent.Executors;
import java.util.concurrent.ExecutorService;
import java.util.LinkedList;
import java.util.List;
import java.util.regex.Pattern;

public class Service extends ${importPrefix}android.app.Service {

	private List<Endpoint> endpoints = new LinkedList<Endpoint>();

    private ExecutorService executorService;

	@Override
	public IBinder onBind(Intent intent) {
		return null;
	}

	@Override
	public void onCreate() {
        executorService = Executors.newFixedThreadPool(16);
        endpoints.add(new io.myweb.AppInfoEndpoint(this));
        endpoints.add(new io.myweb.gen.AssetEndpoint(this));
#foreach( $m in $endpoints )
        endpoints.add(new $m(this));
#end
	}

	@Override
	public int onStartCommand(Intent intent, int flags, int startId) {
		final String request = intent.getStringExtra("request");
        final String reqId = intent.getStringExtra("requestId");
		if (request != null) {
			String firstLine = request.substring(0, request.indexOf("\n"));
			String[] split = firstLine.split(" ");
			final String method = split[0];
			final String uri = split[1];
			executorService.execute(new Runnable() {
				@Override
				public void run() {
					Endpoint endpoint = findEndpoint(method, uri);
					LocalSocket localSocket = new LocalSocket();
					try {
						localSocket.connect(new LocalSocketAddress("/tmp/io.myweb.server"));
						//OutputStream outputStream = new BufferedOutputStream(localSocket.getOutputStream(), 32 * 1024);
						endpoint.invoke(uri, request, localSocket, reqId);
						//PrintStream pw = new PrintStream(outputStream);
						//pw.print(reqId + "\n");
						//pw.print("HTTP/1.1 200 OK\r\n");
						//pw.print("Content-Type: " + response.contentType() + "\r\n");
						//if (response.length() > 0) {
						//	pw.print("Content-Length: " + response.length() + "\r\n");
						//}
						//pw.print("Connection: keep-alive\r\n\r\n");
						//pw.flush();
						//copy(response.inputStream(), outputStream);
						//pw.close();
						//outputStream.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
			});
		}
		return START_NOT_STICKY;
	}

	private Endpoint findEndpoint(String method, String uri) {
		for (Endpoint endpoint : endpoints) {
			if (endpoint.match(method, uri)) {
				return endpoint;
			}
		}
		return new Endpoint() {
			@Override
			public String httpMethod() {
				return "GET";
			}

			@Override
			public String originalPath() {
				return "/";
			}

			@Override
			public Pattern matcher() {
				return Pattern.compile(originalPath());
			}

			@Override
			public boolean match(String method, String uri) {
				return false;
			}

			@Override
			public FormalParam[] formalParams() {
				return new FormalParam[0];
			}

			@Override
			public ActualParam[] actualParams(String uri, String request) {
				return new ActualParam[0];
			}

			@Override
			public void invoke(String uri, String request, LocalSocket localSocket, String reqId) {
				throw new RuntimeException("implement!");
			}
		};
	}

    public static long copy(InputStream from, OutputStream to) throws IOException {
        byte[] buf = new byte[32 * 1024];
        long total = 0;
        while (true) {
            int r = from.read(buf);
            if (r == -1) {
                break;
            }
            to.write(buf, 0, r);
            total += r;
        }
        return total;
    }
}
