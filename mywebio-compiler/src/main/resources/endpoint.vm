#* @vtlvariable name="parsedMethod" type="io.myweb.processor.model.ParsedMethod" *#
/*
 * GENERATED FILE
 */
package io.myweb;

import java.io.*;

import java.util.regex.Pattern;
import java.util.HashMap;
import java.util.Map;

import io.myweb.http.*;

public class $parsedMethod.generatedClassName extends Endpoint {

    public ${parsedMethod.generatedClassName}(Server srv) {
        super(srv);
    }

    protected Method httpMethod() {
        return Method.$parsedMethod.httpMethod;
    }

    protected String originalPath() {
        return "$parsedMethod.httpUri";
    }

    private FormalParam[] formalParams() {
        FormalParam[] formalParams =  new FormalParam[$parsedMethod.parsedParams.size()];
#foreach( $param in $parsedMethod.parsedParams )
        formalParams[$param.id] = new FormalParam($param.id, "$param.typeName", "$param.name");
#end
        return formalParams;
    }

#set( $generatedPattern = $parsedMethod.generatedPattern )

    private Map<String, Integer> groupMap() {
        Map<String, Integer> groupMap = new HashMap<String, Integer>();
#foreach( $gm in $generatedPattern.groupMappings )
        groupMap.put("$gm.name", $gm.idx);
#end
        return groupMap;
    }

    private Map<String, String> defaulQueryParams() {
        Map<String, String> defaultQueryParams = new HashMap<String, String>();
#foreach( $dqp in $parsedMethod.defaultQueryParams)
        defaultQueryParams.put("$dqp.name", "$dqp.val");
#end
        return defaultQueryParams;
    }

    private Pattern pattern = Pattern.compile("$generatedPattern.pattern");

    @Override
    protected Pattern getPattern() {
        return pattern;
    }

	@Override
	public void invoke(String uri, Request request, OutputStream os) throws Exception {
		ActualParam[] ap = actualParams(uri, request, formalParams(), defaulQueryParams(), groupMap(), getContext());
		ResponseWriter rw = new ResponseWriter("${parsedMethod.produces}", os);
		final ${parsedMethod.destMethodRetType} respFromUserCode = new ${parsedMethod.destClass}().${parsedMethod.destMethod}($parsedMethod.paramsJavaSrc);
		rw.write(request.getId(), respFromUserCode);
		rw.close();
	}
}
